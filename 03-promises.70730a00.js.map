{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACT,IAAMC,EAAS,CACbT,WACAC,SAEEI,EACFF,EAAQM,GAERL,EAAOK,E,GAIRR,E,IAKMS,SAASC,cAAc,QAE/BC,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAEN,IAAMC,EAAaC,SAASN,SAASC,cAAc,kBAAkBM,OAC/DC,EAAYF,SAASN,SAASC,cAAc,iBAAiBM,OAC7DE,EAAcH,SAASN,SAASC,cAAc,mBAAmBM,OAEvE,GAAKF,GAAeG,GAAcC,EAAlC,CAUA,IALA,IAAIC,EAAW,EACXC,EAAeN,EAEbO,EAAW,GAERC,EAAI,EAAGA,EAAIJ,EAAaI,IAC/BD,EAASE,KAAKzB,EAAcqB,EAAUC,IACtCD,IACAC,GAAgBH,EAGlBhB,QAAQuB,IAAIH,GACTI,MAAK,SAACC,GACLA,EAAQC,SAAQ,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAC3B6B,EAAAjC,GAASkC,OAAOC,QAAQ,mBAAkCC,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,MAAK,CACnED,SAAU,a,OAIfkC,OAAM,SAACP,GACNA,EAAQC,SAAQ,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAC3B6B,EAAAjC,GAASkC,OAAOI,QAAQ,kBAAiCF,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,MAAK,CAClED,SAAU,a,YA1BhB8B,EAAAjC,GAASkC,OAAOI,QAAQ,sB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      const result = {\n        position,\n        delay\n      };\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result)\n      }\n\n\n    }, delay)\n  })\n}\n\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n\n  const delayInput = parseInt(document.querySelector('[name=\"delay\"]').value);\n  const stepInput = parseInt(document.querySelector('[name=\"step\"]').value);\n  const amountInput = parseInt(document.querySelector('[name=\"amount\"]').value);\n\n  if (!delayInput || !stepInput || !amountInput) {\n    Notiflix.Notify.failure('Fill in all fields.');\n    return;\n  }\n\n  let position = 1;\n  let currentDelay = delayInput;\n\n  const promises = [];\n\n  for (let i = 0; i < amountInput; i++) {\n    promises.push(createPromise(position, currentDelay));\n    position++;\n    currentDelay += stepInput;\n  }\n\n  Promise.all(promises)\n    .then((results) => {\n      results.forEach(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfill promise ${position} in ${delay}ms`, {\n          position: 'right-top'\n        });\n      });\n    })\n    .catch((results) => {\n      results.forEach(({ position, delay }) => {\n        Notiflix.Notify.failure(`Reject promise ${position} in ${delay}ms`, {\n          position: 'right-top'\n        });\n      });\n    });\n});"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","result","document","querySelector","addEventListener","event","preventDefault","delayInput","parseInt","value","stepInput","amountInput","position1","currentDelay","promises","i","push","all","then","results","forEach","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.70730a00.js.map"}